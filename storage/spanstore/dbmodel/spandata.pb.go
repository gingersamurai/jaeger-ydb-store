// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spandata.proto

package dbmodel

import (
	fmt "fmt"
	io "io"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	model "github.com/jaegertracing/jaeger/model"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SpanData struct {
	Process              *model.Process   `protobuf:"bytes,1,opt,name=Process,proto3" json:"Process,omitempty"`
	Tags                 []model.KeyValue `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags"`
	Logs                 []model.Log      `protobuf:"bytes,3,rep,name=logs,proto3" json:"logs"`
	References           []model.SpanRef  `protobuf:"bytes,4,rep,name=references,proto3" json:"references"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SpanData) Reset()         { *m = SpanData{} }
func (m *SpanData) String() string { return proto.CompactTextString(m) }
func (*SpanData) ProtoMessage()    {}
func (*SpanData) Descriptor() ([]byte, []int) {
	return fileDescriptor_884077c58a7e9249, []int{0}
}

func (m *SpanData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *SpanData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpanData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *SpanData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanData.Merge(m, src)
}

func (m *SpanData) XXX_Size() int {
	return m.Size()
}

func (m *SpanData) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanData.DiscardUnknown(m)
}

var xxx_messageInfo_SpanData proto.InternalMessageInfo

func (m *SpanData) GetProcess() *model.Process {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *SpanData) GetTags() []model.KeyValue {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *SpanData) GetLogs() []model.Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *SpanData) GetReferences() []model.SpanRef {
	if m != nil {
		return m.References
	}
	return nil
}

func init() {
	proto.RegisterType((*SpanData)(nil), "SpanData")
}

func init() { proto.RegisterFile("spandata.proto", fileDescriptor_884077c58a7e9249) }

var fileDescriptor_884077c58a7e9249 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x2e, 0x48, 0xcc,
	0x4b, 0x49, 0x2c, 0x49, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0xe2, 0xce, 0xcd, 0x4f, 0x49,
	0xcd, 0x81, 0x72, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0x4c, 0x7d, 0x10, 0x0b, 0x22, 0xaa, 0x74,
	0x9b, 0x91, 0x8b, 0x23, 0xb8, 0x20, 0x31, 0xcf, 0x25, 0xb1, 0x24, 0x51, 0xc8, 0x80, 0x8b, 0x3d,
	0xa0, 0x28, 0x3f, 0x39, 0xb5, 0xb8, 0x58, 0x82, 0x51, 0x81, 0x51, 0x83, 0xdb, 0x48, 0x4c, 0x2f,
	0x2b, 0x31, 0x35, 0x3d, 0xb5, 0x48, 0x2f, 0xb1, 0x20, 0x33, 0xbe, 0xcc, 0x48, 0x0f, 0x2a, 0x1b,
	0x04, 0x53, 0x26, 0x64, 0xc8, 0xc5, 0x52, 0x92, 0x98, 0x5e, 0x2c, 0xc1, 0xa4, 0xc0, 0xac, 0xc1,
	0x6d, 0x24, 0x8e, 0xa6, 0xdc, 0x3b, 0xb5, 0x32, 0x2c, 0x31, 0xa7, 0x34, 0xd5, 0x89, 0xe5, 0xc4,
	0x3d, 0x79, 0x86, 0x20, 0xb0, 0x52, 0x21, 0x1d, 0x2e, 0x96, 0x9c, 0xfc, 0xf4, 0x62, 0x09, 0x66,
	0xb0, 0x16, 0x21, 0x34, 0x2d, 0x3e, 0xf9, 0xe9, 0x30, 0xd5, 0x20, 0x55, 0x42, 0x36, 0x5c, 0x5c,
	0x45, 0xa9, 0x69, 0xa9, 0x45, 0xa9, 0x79, 0xc9, 0xa9, 0xc5, 0x12, 0x2c, 0x60, 0x3d, 0xe8, 0xae,
	0x02, 0xb9, 0x3f, 0x28, 0x35, 0x0d, 0xaa, 0x0f, 0x49, 0xbd, 0x93, 0xe4, 0x89, 0x47, 0x72, 0x8c,
	0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3, 0xb1, 0x1c, 0x43, 0x14, 0x7b, 0x4a,
	0x12, 0x38, 0x50, 0x92, 0xd8, 0xc0, 0xfe, 0x37, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xae, 0xfa,
	0xb3, 0x94, 0x34, 0x01, 0x00, 0x00,
}

func (m *SpanData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpanData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Process != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpandata(dAtA, i, uint64(m.Process.Size()))
		n1, err := m.Process.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSpandata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Logs) > 0 {
		for _, msg := range m.Logs {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSpandata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.References) > 0 {
		for _, msg := range m.References {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSpandata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSpandata(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}

func (m *SpanData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Process != nil {
		l = m.Process.Size()
		n += 1 + l + sovSpandata(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovSpandata(uint64(l))
		}
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovSpandata(uint64(l))
		}
	}
	if len(m.References) > 0 {
		for _, e := range m.References {
			l = e.Size()
			n += 1 + l + sovSpandata(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSpandata(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}

func sozSpandata(x uint64) (n int) {
	return sovSpandata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *SpanData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpandata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpanData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpanData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Process", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpandata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpandata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpandata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Process == nil {
				m.Process = &model.Process{}
			}
			if err := m.Process.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpandata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpandata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpandata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, model.KeyValue{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpandata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpandata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpandata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, model.Log{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field References", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpandata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpandata
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpandata
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.References = append(m.References, model.SpanRef{})
			if err := m.References[len(m.References)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpandata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpandata
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpandata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipSpandata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpandata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpandata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpandata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSpandata
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSpandata
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSpandata
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSpandata(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSpandata
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSpandata = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpandata   = fmt.Errorf("proto: integer overflow")
)
